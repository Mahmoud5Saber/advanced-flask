name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test:
    name: Run Unit Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Cache Python Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Dependencies
        run: |
          python -m venv venv
          venv/bin/pip install --upgrade pip
          venv/bin/pip install -r requirements.txt
          venv/bin/pip install pytest pytest-cov pytest-asyncio httpx pytest-mock

      - name: Start Flask app
        run: |
          venv/bin/python -m flask run --host=0.0.0.0 --port=5050 &
          sleep 5

      - name: Run Tests and Generate Coverage Report
        run: venv/bin/pytest --cov=app --cov-report=xml

      - name: Upload Coverage Report
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage.xml

  security_scan:
    name: Run Trivy Security Scan
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Run Trivy Security Scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          scan-ref: "."
          format: "table"
          exit-code: "1"

  build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: security_scan
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
            username: ${{ secrets.DOCKERHUB_USERNAME }}
            password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and Push Docker Image with Cache
        run: |
          docker buildx build --push --cache-to=type=inline --cache-from=type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/flask-app:latest \
            -t ${{ secrets.DOCKERHUB_USERNAME }}/flask-app:latest \
            -t ${{ secrets.DOCKERHUB_USERNAME }}/flask-app:${{ github.sha }} .

  deploy:
    name: Deploy to Local Server
    runs-on: self-hosted
    needs: build
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Stop and Remove Old Container (Windows)
        shell: powershell
        run: |
          docker ps -q --filter "name=flask_app" | ForEach-Object { docker stop $_; docker rm $_ }


      - name: Run Docker Container
        run: |
          docker run -d --name flask_app --restart always -p 5050:5050 `
            -e FLASK_ENV=production `
            ${{ secrets.DOCKERHUB_USERNAME }}/flask-app:latest


  notify:
    name: Send Notifications on Failure
    runs-on: ubuntu-latest
    if: failure()
    needs: [test, security_scan, build, deploy, performance_test]
    steps:
      - name: Send Slack Notification
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_MESSAGE: "ðŸš¨ CI/CD Pipeline Failed: Check logs!"

  performance_test:
    name: Run Locust Load Tests
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Locust
        run: pip install locust

      - name: Debug - List Files
        run: ls -l

      - name: Run Load Test with Debug
        run: locust --headless -u 10 -r 2 -t 1m --loglevel DEBUG -H http://127.0.0.1:5050 -f locustfile.py

