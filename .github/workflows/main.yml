name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test:
    name: Run Unit Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Debug File Structure
        run: ls -R

      - name: Install Dependencies
        run: |
          python -m venv venv
          venv/bin/pip install --upgrade pip
          venv/bin/pip install -r requirements.txt
          venv/bin/pip install pytest pytest-cov pytest-asyncio httpx pytest-mock

      - name: Start Flask app
        run: |
          venv/bin/python -m flask run --host=0.0.0.0 --port=5050 &
          sleep 5

      - name: Run Tests and Generate Coverage Report
        run: venv/bin/pytest --cov=app --cov-report=xml

      - name: Upload Coverage Report
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage.xml
          


  security_scan:
    name: Run Trivy Security Scan
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Run Trivy Security Scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          scan-ref: "."
          format: "table"
          exit-code: "1"

  build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: security_scan
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build and Push Docker Image
        run: |
          docker buildx create --use
          docker buildx build --cache-to=type=inline --cache-from=type=registry,ref=mydockerhub/flask-app:latest -t mydockerhub/flask-app:latest .
          docker tag mydockerhub/flask-app:latest mydockerhub/flask-app:${{ github.sha }}
          docker push mydockerhub/flask-app:latest
          docker push mydockerhub/flask-app:${{ github.sha }}

  deploy:
    name: Deploy to Test Server
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy using SSH
        uses: appleboy/ssh-action@v1.0.2
        with:
          host: ${{ secrets.TEST_SERVER_IP }}
          username: ${{ secrets.TEST_SERVER_USER }}
          key: ${{ secrets.TEST_SERVER_SSH_KEY }}
          script: |
            docker pull mydockerhub/flask-app:latest
            docker stop flask_app || true
            docker rm flask_app || true
            docker run -d --name flask_app --restart always -p 5050:5050 mydockerhub/flask-app:latest

  notify:
    name: Send Notifications on Failure
    runs-on: ubuntu-latest
    if: failure()
    needs: [test, security_scan, build, deploy]
    steps:
      - name: Send Slack Notification
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_MESSAGE: "ðŸš¨ CI/CD Pipeline Failed: Check logs!"

  performance_test:
    name: Run Locust Load Tests
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Install Locust
        run: pip install locust

      - name: Run Load Test
        run: locust --headless -u 10 -r 2 -t 1m --skip-log -H http://${{ secrets.TEST_SERVER_IP }}:5050
